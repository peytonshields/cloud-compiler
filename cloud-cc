#!/usr/bin/env python3
'''
Read clang CC1 driver command, tweak to preprocess input, and send direct the cloud CC1 to 
compile the preprocessed file
'''

import argparse
import sys
import subprocess
import tempfile
import os

parser = argparse.ArgumentParser()

parser.add_argument('-resource-dir')
parser.add_argument('-masm-verbose', action='store_true')
parser.add_argument('-dwarf-column-info', action='store_true')
parser.add_argument('-fmessage-length')
parser.add_argument('-fstack-check', action='store_true')
parser.add_argument('-mdarwin-stkchk-strong-link', action='store_true')
parser.add_argument('-fdiagnostics-show-option', action='store_true')
parser.add_argument('-isysroot')
parser.add_argument('-emit-obj', action='store_true')
parser.add_argument('-I')
parser.add_argument('-o', '--output')
parser.add_argument('-E', action='store_true')
parser.add_argument('-internal-isystem')
parser.add_argument('-cxx-isystem')
parser.add_argument('-c-isystem')
parser.add_argument('-internal-externc-isystem')
parser.add_argument('-fdebug-compilation-dir')
parser.add_argument('-x')

# Preprocess the input
preprocess_args = ['clang'] + sys.argv[1:] + ['-E', '-o', '-']
preprocess = subprocess.Popen(preprocess_args, stdout=subprocess.PIPE)

parsed, kept_args = parser.parse_known_args()
# TODO: be more comprehensive (e.g., support foo.ll)
language = 'cpp-output' if parsed.x == 'c' else 'c++-cpp-output'

chunks = 4 # Number of chunks to split file into

# run the lambda to call frontend and get raw bitcode, then split
frontend_args = kept_args[:-1] + ['-emit-llvm-bc', '-disable-llvm-passes', '-x',  language]

compile_args = ['./cloud_compile.py', f'-chunks={chunks}', '-split', '-', f'-clang={" ".join(frontend_args)}', '-o', '-']
frontend = subprocess.Popen(compile_args, stdin=preprocess.stdout, stdout=subprocess.PIPE)

print("Finished Frontend & Splitting")

with tempfile.TemporaryDirectory() as tmpdir:
    # Pass output of the preprocessing process to the compiling process
    opt_args = kept_args[:-1] + ['-x', 'ir', '-emit-obj']
    compile_args = ['cloud_compile.py', '-', f'-clang={" ".join(opt_args)}', '-o', tmpdir]
    subprocess.call(compile_args, stdin=frontend.stdout)

    print('Finished Backend Compiling')

    # link the result
    link_args = ['ld', '-r']
    link_args.extend(file for file in os.listdir(tmpdir))
    link_args.extend(['-o', parsed.output])
    subprocess.call(link_args)

    print('Linked Chunks')
